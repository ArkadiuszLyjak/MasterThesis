/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package MasterThesis;
//TODO Encje naglowkow plikow wynikowych
//TODO Encje artosci wyliczen do plikow wynikowych
//TODO Wykluczenie poskich znaków powdują znaki nowych lini readerze
//Jednoliczta obsluga błędow
// odczytu pliku
// bledow w pliku

//GŁÓWY PROG
/*
 poranie praramretrow
 jezeli potrzeba w zależności od paramerow to czytaj wszystkie dane z plikow
 zbuduj listy wszystkicj plikow
 zbuduj mape sieci
 wykoneja przejści i obliczenia

 w zależności od parametrow zapisz obliczenia

* */

import MasterThesis.base.parameters.AppParameters;
import MasterThesis.base.parameters.AppParametersService;
import MasterThesis.bfs.ElectricalNetwork;
import MasterThesis.node.NodeFactory;
import MasterThesis.transformer_type.TransformerTypeFactory;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.function.Consumer;

public class MainApp {

    public static void netFileRead(String sFileName, Consumer<String> consumer) throws FileNotFoundException {

        File file = new File(sFileName);
        Scanner scan = new Scanner(file);

        int lines = 0;
        while (scan.hasNextLine()) {
            String line = scan.nextLine();
            if (line.substring(0,2).compareTo("//") != 0) {
                if (lines == 0 ) {
                    System.out.println("Linia nagłówkowa lines="+lines+" "+line);
                }
                else {
                    System.out.println(lines+">>>"+line);
                    consumer.accept(line);
                }
                lines++;
            }
        }
        System.out.println("Ilość wierszy w pliku: " + lines);
        scan.close();

    }


    public static void main(String[] args) throws FileNotFoundException {
        System.out.println("Zaczynamy");
        System.out.println("--------------");

        AppParameters params = AppParameters.getInstance();
        AppParametersService paramsService =  AppParametersService.getInstance();
        ElectricalNetwork elNet = ElectricalNetwork.getInstance();
        elNet.initList();

        //String nodeFileName = paramsService.getNodeFileFullPath();

        netFileRead(paramsService.getNodeFileFullPath(),
                    s ->  elNet.nodeList.add(NodeFactory.prepareFromString(s)));

        netFileRead(paramsService.getTransformerTypeFullFileName(),
                    s ->  elNet.transformerTypeList.add(TransformerTypeFactory.prepareFromString(s)));


        elNet.nodeList.forEach(nodeEntity -> System.out.println(nodeEntity.getActivePower()) );

    }
}
